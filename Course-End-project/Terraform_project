Install terrafrom :
==============================


wget -O- https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg

echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list

sudo apt update 

 sudo apt install terraform


# terraform --version




AWS Set up:

In AWS 

IAM > Users > click on create user > give a username > click next > select Attach policies directly > select AdministratorAccess below >> click on next > click on create user.

Now lets attach access key and secret key to the user.

Click on username>> click on security credentials > Select Access keys> click on create access key
 > select Command Line Interface (CLI)
> click on I understand the above recommendation and want to proceed to create an access key. > press next > click on create access key

Access key:
Secret key: 


All the AWS resource code of terraform is available in Terraform Registry : https://registry.terraform.io/providers/hashicorp/aws/latest/docs

==================================

Configure the lab machine to fetch AWS access key and secret key from the shared credentials file.

# cd

# apt-get update

# apt install awscli

# aws configure

Give the valid access key

Give the valid secret key

Press enter, no need to give any region and format option
To verify if the credentials have been set for aws

# cat ~/.aws/credentials


Now create the provider block for terraform:
=====================================

# mkdir myterraformfiles

# cd myterraformfiles

# vim awsinfra.tf


provider "aws" {
  region = "us-east-1"
  shared_credentials_files =  ["~/.aws/credentials"]
}

Save the file and we will install aws provider plugin

# terraform init



Open the code file:

# vim awsinfra.tf


Add this code below the provider block


resource "aws_vpc" "sl-vpc" {
  cidr_block       = "10.0.0.0/16"
 
  tags = {
    Name = "sl-vpc"
  }
}

resource "aws_subnet" "subnet-1" {
  vpc_id     = aws_vpc.sl-vpc.id
  cidr_block = "10.0.1.0/24"
  map_public_ip_on_launch = true
  depends_on = [aws_vpc.sl-vpc]
  tags = {
    Name = "sl-subnet"
  }
}


Save the file

# terraform validate

# terraform apply

when asked for approval give yes

you will vpc and subnet created on AWS


Open the code file again and add below code

# vim awsinfra.tf


resource "aws_route_table" "sl-route-table" {
  vpc_id = aws_vpc.sl-vpc.id
  tags = {
    Name = "sl-route-table"
}
}

resource "aws_route_table_association" "a" {
  subnet_id      = aws_subnet.subnet-1.id
  route_table_id = aws_route_table.sl-route-table.id
}


resource "aws_internet_gateway" "gw" {
  vpc_id = aws_vpc.sl-vpc.id
  depends_on = [aws_vpc.sl-vpc]
  tags = {
    Name = "sl-gw"
  }
}

resource "aws_route" "sl-route" {
  route_table_id            = aws_route_table.sl-route-table.id
  destination_cidr_block    = "0.0.0.0/0"
  gateway_id = aws_internet_gateway.gw.id
}



save the file

# terraform apply

Enter value : yes





