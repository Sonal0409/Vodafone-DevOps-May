Installation of Kubernetes on the Lab:
===================================================
Step 1:

### INSTALL/Upgrade DOCKER 

# sudo su -
# sudo apt-get update
# sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common

curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
sudo apt-get update ; clear
sudo apt-get install -y docker-ce

sudo vi /etc/docker/daemon.json

Press i and insert below content

{
	"exec-opts": ["native.cgroupdriver=systemd"]
}

Save the file. (:wq!)

sudo service docker restart



Step 2: 

### INSTALL KUBEADM,KUBELET,KUBECTL


echo "deb http://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list
curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
sudo apt-get update ; clear
sudo apt-get install -y kubelet kubeadm kubectl	

Step3: 

##### Initiate Kube cluster

sudo kubeadm init --ignore-preflight-errors=all

Step 4:

#### Setup the environment Variables

  mkdir -p $HOME/.kube
  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
  sudo chown $(id -u):$(id -g) $HOME/.kube/config


Step 5:
## set up the  Calico network

sudo kubectl apply -f https://raw.githubusercontent.com/projectcalico/calico/v3.24.1/manifests/calico.yaml


Step 6:

#### check if Kube Master is ready or not

# kubectl get nodes

REMOVE THE TAINT ON THE NODE:
======================================

# kubectl taint node ip-172-31-25-55  node-role.kubernetes.io/master:NoSchedule-


====================================================

# mkdir mykubefile
# cd mykubefiles
# vim pod-defintion.yml


kind: Pod 
apiVersion: v1
metadata:
 name: pod2
 labels:
  app: server
  env: test
  author: Sonal
spec:
 containers:
  - name: c1
    image: nginx
  - name: c2
    image: tomcat


# kubectl create -f pod-defintion.yml

# kubectl get pods -o wide

# kubectl describe pod pod2

==============================================

Deployment in kubernetes:
==============================================

# vim deployment.yml

kind: Deployment 
apiVersion: apps/v1
metadata:
 name: mydeploy
spec:
 replicas: 5
 selector:
  matchLabels:
   type: webserver
 template:   # template here is pod template using which kubernetes will create the replicas
  metadata:
    labels:
     type: webserver
  spec:
   containers:
    - name: c1
      image: nginx



# kubectl create -f deployment.yml

# kubectl get all

# kubectl scale deployment mydeploy --replicas = 10

# kubectl scale deployment mydeploy --replicas = 5


=====================================================

Service - ClusterIP

# vim pod-nginx.yml

apiVersion: v1
kind: Pod
metadata:
 name: pod1
 labels:
  type: webserver
spec:
 containers:
  - name: c1
    image: nginx

# kubectl create -f pod-nginx.yml

# kubectl get pods -o wide

# vim service-nginx.yml

kind: Service
apiVersion: v1
metadata:
 name: mysvc
spec:
 type: ClusterIP
 selector:
   type: webserver
 ports:
  - targetPort: 80  # its container port
    port: 80  # this is service port


# kubectl create -f service-nginx.yml

# kubectl get svc

# kubectl get endpoints

Create the test pod:

# vim test-pod.yml

apiVersion: v1
kind: Pod
metadata:
 name: test-pod
 labels:
  type: test
spec:
 containers:
  - name: c1
    image: ubuntu
    command: [/bin/bash, -c, sleep 6000]


# kubeclt create -f test-pod.yml

# kubectl exec -it test-pod -- /bin/bash

# curl mysvc










































