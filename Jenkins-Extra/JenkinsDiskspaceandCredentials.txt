
1. schedule build has not triggered due to disk space issue, How to resolve it?
2.How to create a job for ear and log deletion?
3.How to increase disk size?


https://docs.cloudbees.com/docs/cloudbees-ci-kb/latest/best-practices/deleting-old-builds-best-strategy-for-cleanup-and-disk-space-management

https://plugins.jenkins.io/disk-usage/

https://linuxhint.com/jenkins-disk-space-cleanup/

Make sure you understand what is the disk output of your build - if possible - restrict the output to happen only to the job workspace. Use workspace cleanup plugin to cleanup the workspace as post build step.
If the process must write some data to external folders - clean them up manually on post build steps.
Alternative1 - provision a new slave per job (use spot slaves - there are many plugins that integrate with different cloud provider to provision on the fly machines on demand)

Alternative2 - run the build inside a container. Everything will be discarded once the build is finished

Delete old build or other large size folder

You can limit the reduce of disc space by discarding the old builds. There's a checkbox for this in the project configuration.

You can go to Manage Nodes --> configure main node -->disk space

a cleanup job with the following build steps. You can schedule it @daily or @weekly.

Execute system groovy script build step to clean up old jobs:
    import jenkins.model.Jenkins
    import hudson.model.Job

    BUILDS_TO_KEEP = 5

    for (job in Jenkins.instance.items) {
      println job.name

      def recent = job.builds.limit(BUILDS_TO_KEEP)

      for (build in job.builds) {
        if (!recent.contains(build)) {
          println "Preparing to delete: " + build
          build.delete()
        }
      }
    }
You'd need to have Groovy plugin installed.

Execute shell build step to clean cache directories
rm -r ~/.gradle/
rm -r ~/.m2/

echo "Disk space"
du -h -s /



 download the tmpcleaner from https://updates.jenkins-ci.org/download/plugins/tmpcleaner/

You will get an hpi file here. Go to Manage Jenkins-> Manage plugins-> Advanced and then upload the hpi file here and restart jenkins

You can immediately see a difference if you go to Manage Nodes.


that disk space is generally cheap these days. masters can have hundreds of GB to avoid disk space issue.

Few methods which we employ to save on space is by using
1. any "post-build" for any job to delete job workspace if not needed.
2. Limit the number of job build logs to minimum - say around 2-4.
3. Install this disk usage plugin - https://wiki.jenkins.io/display/JENKINS/Disk+Usage+Plugin which helps monitor.


Another technique that has helped me save space in the past was limiting the number of builds that I kept, especially on jobs where the build history is much less important than the most recent results.  The "configuration slicing plugin" can help make configuration changes to many jobs at one time if you were initially retaining all builds and now want to limit the number of builds retained.




https://plugins.jenkins.io/purge-job-history/#:~:text=Jenkins%20Purge%20Job%20History%20Plugin,Job%20(Recursive%20Flag%20is%20Needed)



Delete a Jenkins build via GUI.

Go into the build you want to delete, and click the  Delete this build   button in the upper right corner.

enter image description here

If you need to clean the Jenkins build history, and reset the build number back to 1, you can run a simple script in Jenkins Script Console. source

Go to Jenkins Script Console.

Go to your Jenkins home page -> Manage Jenkins -> Script Console.

enter image description here

Run this script to clean and reset.

Copy and paste this script to your Console Script text area and change the "copy_folder" to the project name that you need to clean the history. Then click the Run button.

def jobName = "copy_folder"  
def job = Jenkins.instance.getItem(jobName)  
job.getBuilds().each { it.delete() }  
job.nextBuildNumber = 1   
job.save()
If you're using multibranch pipeline or folders, the second line of the above script has to be modified like this:

def jobName = "path/to/your/jenkins/pipeline/master"
def job = Jenkins.getInstance().getItemByFullName(jobName, Job.class)
Another way to remove old builds or jobs is from the command-line.

Login to Jenkins command-line.

To remove an entire job and build history remove the job folder, e.g.:

rm -rf jobs/jobname
To look at build history:

$ ls jobs/jobname/builds

1409  1411  1413  1415  1417  1419  1421  1423  1425
923  963  974  985  lastFailedBuild  lastSuccessfulBuild  
lastUnsuccessfulBuild 1191  1334  1348  1379  1381  1383
1406  1408  1410  1412  1414  1416  1418  1420  1422  1424
913   962  973  978  987  lastStableBuild  lastUnstableBuild
legacyIds
To remove selected builds then remove the build number directory, e.g.:

rm -rf jobs/jobname/builds/97* jobs/jobname/builds/13*
Don't forget the last step if removing or editing files under Jenkins.

After removing jobs or builds from file system you need to go to Manage Jenkins in the Jenkins GUI and click Reload Configuration from Disk.

Note: The Jenkins home directory might be in /var/jenkins_home or /var/lib/jenkins or another location.




4. regarding poll scam there is connectivity issue between jenkins vs GitHub.
      how to resolve it?
5. How do you store credentials in Jenkins securely?

https://www.cyberark.com/resources/threat-research-blog/configuring-and-securing-credentials-in-jenkins