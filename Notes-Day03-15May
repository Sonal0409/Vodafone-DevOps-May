
Click on New Item --> Give name of Job as CIpipelineCodev --> Select pipeline template project --> press ok

Add the pipeline code:



pipeline{
    
    agent any  // here 'any' means run the pipeline on current server
    
    tools{
        maven 'mymaven'
    }
    
    stages{
        stage('Checkout Code'){
            
            steps{
                git 'https://github.com/Sonal0409/DevOpsCodeDemo.git'
            }
            
        }
        
        stage('Compile Code'){
            steps{
                sh 'mvn compile'
            }
        }
        
         stage('Test Code'){
            steps{
                sh 'mvn test'
            }
            post{
                success{
                    junit stdioRetention: '', testResults: 'target/surefire-reports/*.xml'
                }
            }
        }
        
        stage('Build Code'){
            
            steps{
                sh 'mvn package'
            }
        }
        
    }
}


Save the job and build it

Create a new jOb -> HandleError > select project as Pipeline > press ok > add below code

pipeline {
    agent any
    stages {
        stage('job1') {
            steps {
                sh 'mkdir sonal'
            }
        }
        stage('job2') {
            steps {
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                    sh "mkdir sonal"
                }
            }
        }
        stage('job3') {
            steps {
                sh 'touch myfile'
            }
        }
    }
}

Save the job and run

Create a new Job --> prameterized Build --> select project as pipeline -->press ok --> add the below code

pipeline{
    
    agent any
    
    tools{
        maven 'mymaven'
    }
    
    parameters{
        // variables that will store a value
        
        choice(name:'ENV',choices: ["","Dev","QA"])
    }
    
    stages{
        
        stage('Build for Dev Env'){
            
           when { expression {params.ENV == "Dev"} } 
           steps{
               git 'https://github.com/Sonal0409/DevOpsCodeDemo.git'
               sh 'mvn pmd:pmd'
               sh 'mvn package'
           }
            
        }
        
          stage('Build for QA Env'){
            
           when { expression {params.ENV == "QA"} } 
           steps{
               git 'https://github.com/Sonal0409/DevOpsCodeDemo.git'
               sh 'mvn test'
               sh 'mvn package'
           }
            
        }
        
        
        }
    }
    
    
    


Save the job and run  -> no stage will be exeucted

refresh the page --> you will see the option Build with parameters

Select the paramter value and build


=================================

Create a new job and run below code



@Library('my-shared-library') _ 
pipeline{
    
    agent any
    
    tools{
        maven 'mymaven'
    }
    
    stages{
        
        stage('checkout code')
        
        { 
            steps{
                
            cloneRepo('https://github.com/Sonal0409/DevOpsCodeDemo.git')
        }
        
        }
        
        stage('build Code')
        {
            steps{
                build('Compile')
            }
        }
        
        stage('Check log'){
            
            steps{
                filterLogs('WARNING',2)
            }
            
        }
    }
    
}





















